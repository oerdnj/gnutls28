/*   -*- buffer-read-only: t -*- vi: set ro:
 *
 *  DO NOT EDIT THIS FILE   (serv-args.c)
 *
 *  It has been AutoGen-ed
 *  From the definitions    serv-args.def
 *  and the template file   options
 *
 * Generated from AutoOpts 41:1:16 templates.
 *
 *  AutoOpts is a copyrighted work.  This source file is not encumbered
 *  by AutoOpts licensing, but is provided under the licensing terms chosen
 *  by the gnutls-serv author or copyright holder.  AutoOpts is
 *  licensed under the terms of the LGPL.  The redistributable library
 *  (``libopts'') is licensed under the terms of either the LGPL or, at the
 *  users discretion, the BSD license.  See the AutoOpts and/or libopts sources
 *  for details.
 *
 * The gnutls-serv program is copyrighted and licensed
 * under the following terms:
 *
 *  Copyright (C) 2000-2016 Free Software Foundation, and others, all rights reserved.
 *  This is free software. It is licensed for use, modification and
 *  redistribution under the terms of the GNU General Public License,
 *  version 3 or later <http://gnu.org/licenses/gpl.html>
 *
 *  gnutls-serv is free software: you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the
 *  Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  gnutls-serv is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __doxygen__
#define OPTION_CODE_COMPILE 1
#include "serv-args.h"
#include <sys/types.h>

#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>

#ifdef  __cplusplus
extern "C" {
#endif
extern FILE * option_usage_fp;
#define zCopyright      (gnutls_serv_opt_strs+0)
#define zLicenseDescrip (gnutls_serv_opt_strs+286)


#ifndef NULL
#  define NULL 0
#endif

/**
 *  static const strings for gnutls-serv options
 */
static char const gnutls_serv_opt_strs[3225] =
/*     0 */ "gnutls-serv 3.4.9\n"
            "Copyright (C) 2000-2016 Free Software Foundation, and others, all rights reserved.\n"
            "This is free software. It is licensed for use, modification and\n"
            "redistribution under the terms of the GNU General Public License,\n"
            "version 3 or later <http://gnu.org/licenses/gpl.html>\n\0"
/*   286 */ "gnutls-serv is free software: you can redistribute it and/or modify it\n"
            "under the terms of the GNU General Public License as published by the Free\n"
            "Software Foundation, either version 3 of the License, or (at your option)\n"
            "any later version.\n\n"
            "gnutls-serv is distributed in the hope that it will be useful, but WITHOUT\n"
            "ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n"
            "FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n"
            "more details.\n\n"
            "You should have received a copy of the GNU General Public License along\n"
            "with this program.  If not, see <http://www.gnu.org/licenses/>.\n\0"
/*   897 */ "Enable debugging\0"
/*   914 */ "DEBUG\0"
/*   920 */ "debug\0"
/*   926 */ "Don't accept session tickets\0"
/*   955 */ "NOTICKET\0"
/*   964 */ "noticket\0"
/*   973 */ "Generate Diffie-Hellman and RSA-export parameters\0"
/*  1023 */ "GENERATE\0"
/*  1032 */ "generate\0"
/*  1041 */ "Suppress some messages\0"
/*  1064 */ "QUIET\0"
/*  1070 */ "quiet\0"
/*  1076 */ "Do not use a resumption database\0"
/*  1109 */ "NODB\0"
/*  1114 */ "nodb\0"
/*  1119 */ "Act as an HTTP server\0"
/*  1141 */ "HTTP\0"
/*  1146 */ "http\0"
/*  1151 */ "Act as an Echo server\0"
/*  1173 */ "ECHO\0"
/*  1178 */ "echo\0"
/*  1183 */ "Use DTLS (datagram TLS) over UDP\0"
/*  1216 */ "UDP\0"
/*  1220 */ "udp\0"
/*  1224 */ "Set MTU for datagram TLS\0"
/*  1249 */ "MTU\0"
/*  1253 */ "mtu\0"
/*  1257 */ "Offer SRTP profiles\0"
/*  1277 */ "SRTP_PROFILES\0"
/*  1291 */ "srtp-profiles\0"
/*  1305 */ "Do not request a client certificate\0"
/*  1341 */ "DISABLE_CLIENT_CERT\0"
/*  1361 */ "disable-client-cert\0"
/*  1381 */ "Require a client certificate\0"
/*  1410 */ "REQUIRE_CLIENT_CERT\0"
/*  1430 */ "require-client-cert\0"
/*  1450 */ "If a client certificate is sent then verify it.\0"
/*  1498 */ "VERIFY_CLIENT_CERT\0"
/*  1517 */ "verify-client-cert\0"
/*  1536 */ "Activate heartbeat support\0"
/*  1563 */ "HEARTBEAT\0"
/*  1573 */ "heartbeat\0"
/*  1583 */ "Use DER format for certificates to read from\0"
/*  1628 */ "X509FMTDER\0"
/*  1639 */ "x509fmtder\0"
/*  1650 */ "Priorities string\0"
/*  1668 */ "PRIORITY\0"
/*  1677 */ "priority\0"
/*  1686 */ "DH params file to use\0"
/*  1708 */ "DHPARAMS\0"
/*  1717 */ "dhparams\0"
/*  1726 */ "Certificate file or PKCS #11 URL to use\0"
/*  1766 */ "X509CAFILE\0"
/*  1777 */ "x509cafile\0"
/*  1788 */ "CRL file to use\0"
/*  1804 */ "X509CRLFILE\0"
/*  1816 */ "x509crlfile\0"
/*  1828 */ "PGP Key file to use\0"
/*  1848 */ "PGPKEYFILE\0"
/*  1859 */ "pgpkeyfile\0"
/*  1870 */ "PGP Key ring file to use\0"
/*  1895 */ "PGPKEYRING\0"
/*  1906 */ "pgpkeyring\0"
/*  1917 */ "PGP Public Key (certificate) file to use\0"
/*  1958 */ "PGPCERTFILE\0"
/*  1970 */ "pgpcertfile\0"
/*  1982 */ "X.509 key file or PKCS #11 URL to use\0"
/*  2020 */ "X509KEYFILE\0"
/*  2032 */ "x509keyfile\0"
/*  2044 */ "X.509 Certificate file or PKCS #11 URL to use\0"
/*  2090 */ "X509CERTFILE\0"
/*  2103 */ "x509certfile\0"
/*  2116 */ "Alternative X.509 key file or PKCS #11 URL to use\0"
/*  2166 */ "X509DSAKEYFILE\0"
/*  2181 */ "x509dsakeyfile\0"
/*  2196 */ "Alternative X.509 Certificate file or PKCS #11 URL to use\0"
/*  2254 */ "X509DSACERTFILE\0"
/*  2270 */ "x509dsacertfile\0"
/*  2286 */ "X509ECCKEYFILE\0"
/*  2301 */ "x509ecckeyfile\0"
/*  2316 */ "X509ECCCERTFILE\0"
/*  2332 */ "x509ecccertfile\0"
/*  2348 */ "PGP subkey to use (hex or auto)\0"
/*  2380 */ "PGPSUBKEY\0"
/*  2390 */ "pgpsubkey\0"
/*  2400 */ "SRP password file to use\0"
/*  2425 */ "SRPPASSWD\0"
/*  2435 */ "srppasswd\0"
/*  2445 */ "SRP password configuration file to use\0"
/*  2484 */ "SRPPASSWDCONF\0"
/*  2498 */ "srppasswdconf\0"
/*  2512 */ "PSK password file to use\0"
/*  2537 */ "PSKPASSWD\0"
/*  2547 */ "pskpasswd\0"
/*  2557 */ "PSK identity hint to use\0"
/*  2582 */ "PSKHINT\0"
/*  2590 */ "pskhint\0"
/*  2598 */ "The OCSP response to send to client\0"
/*  2634 */ "OCSP_RESPONSE\0"
/*  2648 */ "ocsp-response\0"
/*  2662 */ "The port to connect to\0"
/*  2685 */ "PORT\0"
/*  2690 */ "port\0"
/*  2695 */ "Print a list of the supported algorithms and modes\0"
/*  2746 */ "LIST\0"
/*  2751 */ "list\0"
/*  2756 */ "Specify the PKCS #11 provider library\0"
/*  2794 */ "PROVIDER\0"
/*  2803 */ "provider\0"
/*  2812 */ "display extended usage information and exit\0"
/*  2856 */ "help\0"
/*  2861 */ "extended usage information passed thru pager\0"
/*  2906 */ "more-help\0"
/*  2916 */ "output version information and exit\0"
/*  2952 */ "version\0"
/*  2960 */ "GNUTLS_SERV\0"
/*  2972 */ "gnutls-serv - GnuTLS server\n"
            "Usage:  %s [ -<flag> [<val>] | --<name>[{=| }<val>] ]...\n\0"
/*  3058 */ "bugs@gnutls.org\0"
/*  3074 */ "\n\0"
/*  3076 */ "Server program that listens to incoming TLS connections.\n\0"
/*  3134 */ "gnutls-serv 3.4.9\0"
/*  3152 */ "Usage: gnutls-serv [options]\n"
            "gnutls-serv --help for usage instructions.\n";

/**
 *  debug option description:
 */
/** Descriptive text for the debug option */
#define DEBUG_DESC      (gnutls_serv_opt_strs+897)
/** Upper-cased name for the debug option */
#define DEBUG_NAME      (gnutls_serv_opt_strs+914)
/** Name string for the debug option */
#define DEBUG_name      (gnutls_serv_opt_strs+920)
/** Compiled in flag settings for the debug option */
#define DEBUG_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_NUMERIC))

/**
 *  noticket option description:
 */
/** Descriptive text for the noticket option */
#define NOTICKET_DESC      (gnutls_serv_opt_strs+926)
/** Upper-cased name for the noticket option */
#define NOTICKET_NAME      (gnutls_serv_opt_strs+955)
/** Name string for the noticket option */
#define NOTICKET_name      (gnutls_serv_opt_strs+964)
/** Compiled in flag settings for the noticket option */
#define NOTICKET_FLAGS     (OPTST_DISABLED)

/**
 *  generate option description:
 */
/** Descriptive text for the generate option */
#define GENERATE_DESC      (gnutls_serv_opt_strs+973)
/** Upper-cased name for the generate option */
#define GENERATE_NAME      (gnutls_serv_opt_strs+1023)
/** Name string for the generate option */
#define GENERATE_name      (gnutls_serv_opt_strs+1032)
/** Compiled in flag settings for the generate option */
#define GENERATE_FLAGS     (OPTST_DISABLED)

/**
 *  quiet option description:
 */
/** Descriptive text for the quiet option */
#define QUIET_DESC      (gnutls_serv_opt_strs+1041)
/** Upper-cased name for the quiet option */
#define QUIET_NAME      (gnutls_serv_opt_strs+1064)
/** Name string for the quiet option */
#define QUIET_name      (gnutls_serv_opt_strs+1070)
/** Compiled in flag settings for the quiet option */
#define QUIET_FLAGS     (OPTST_DISABLED)

/**
 *  nodb option description:
 */
/** Descriptive text for the nodb option */
#define NODB_DESC      (gnutls_serv_opt_strs+1076)
/** Upper-cased name for the nodb option */
#define NODB_NAME      (gnutls_serv_opt_strs+1109)
/** Name string for the nodb option */
#define NODB_name      (gnutls_serv_opt_strs+1114)
/** Compiled in flag settings for the nodb option */
#define NODB_FLAGS     (OPTST_DISABLED)

/**
 *  http option description:
 */
/** Descriptive text for the http option */
#define HTTP_DESC      (gnutls_serv_opt_strs+1119)
/** Upper-cased name for the http option */
#define HTTP_NAME      (gnutls_serv_opt_strs+1141)
/** Name string for the http option */
#define HTTP_name      (gnutls_serv_opt_strs+1146)
/** Compiled in flag settings for the http option */
#define HTTP_FLAGS     (OPTST_DISABLED)

/**
 *  echo option description:
 */
/** Descriptive text for the echo option */
#define ECHO_DESC      (gnutls_serv_opt_strs+1151)
/** Upper-cased name for the echo option */
#define ECHO_NAME      (gnutls_serv_opt_strs+1173)
/** Name string for the echo option */
#define ECHO_name      (gnutls_serv_opt_strs+1178)
/** Compiled in flag settings for the echo option */
#define ECHO_FLAGS     (OPTST_DISABLED)

/**
 *  udp option description:
 */
/** Descriptive text for the udp option */
#define UDP_DESC      (gnutls_serv_opt_strs+1183)
/** Upper-cased name for the udp option */
#define UDP_NAME      (gnutls_serv_opt_strs+1216)
/** Name string for the udp option */
#define UDP_name      (gnutls_serv_opt_strs+1220)
/** Compiled in flag settings for the udp option */
#define UDP_FLAGS     (OPTST_DISABLED)

/**
 *  mtu option description:
 */
/** Descriptive text for the mtu option */
#define MTU_DESC      (gnutls_serv_opt_strs+1224)
/** Upper-cased name for the mtu option */
#define MTU_NAME      (gnutls_serv_opt_strs+1249)
/** Name string for the mtu option */
#define MTU_name      (gnutls_serv_opt_strs+1253)
/** Compiled in flag settings for the mtu option */
#define MTU_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_NUMERIC))

/**
 *  srtp_profiles option description:
 */
/** Descriptive text for the srtp_profiles option */
#define SRTP_PROFILES_DESC      (gnutls_serv_opt_strs+1257)
/** Upper-cased name for the srtp_profiles option */
#define SRTP_PROFILES_NAME      (gnutls_serv_opt_strs+1277)
/** Name string for the srtp_profiles option */
#define SRTP_PROFILES_name      (gnutls_serv_opt_strs+1291)
/** Compiled in flag settings for the srtp_profiles option */
#define SRTP_PROFILES_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  disable-client-cert option description:
 */
/** Descriptive text for the disable-client-cert option */
#define DISABLE_CLIENT_CERT_DESC      (gnutls_serv_opt_strs+1305)
/** Upper-cased name for the disable-client-cert option */
#define DISABLE_CLIENT_CERT_NAME      (gnutls_serv_opt_strs+1341)
/** Name string for the disable-client-cert option */
#define DISABLE_CLIENT_CERT_name      (gnutls_serv_opt_strs+1361)
/** Compiled in flag settings for the disable-client-cert option */
#define DISABLE_CLIENT_CERT_FLAGS     (OPTST_DISABLED)

/**
 *  require-client-cert option description:
 */
/** Descriptive text for the require-client-cert option */
#define REQUIRE_CLIENT_CERT_DESC      (gnutls_serv_opt_strs+1381)
/** Upper-cased name for the require-client-cert option */
#define REQUIRE_CLIENT_CERT_NAME      (gnutls_serv_opt_strs+1410)
/** Name string for the require-client-cert option */
#define REQUIRE_CLIENT_CERT_name      (gnutls_serv_opt_strs+1430)
/** Compiled in flag settings for the require-client-cert option */
#define REQUIRE_CLIENT_CERT_FLAGS     (OPTST_DISABLED)

/**
 *  verify-client-cert option description:
 */
/** Descriptive text for the verify-client-cert option */
#define VERIFY_CLIENT_CERT_DESC      (gnutls_serv_opt_strs+1450)
/** Upper-cased name for the verify-client-cert option */
#define VERIFY_CLIENT_CERT_NAME      (gnutls_serv_opt_strs+1498)
/** Name string for the verify-client-cert option */
#define VERIFY_CLIENT_CERT_name      (gnutls_serv_opt_strs+1517)
/** Compiled in flag settings for the verify-client-cert option */
#define VERIFY_CLIENT_CERT_FLAGS     (OPTST_DISABLED)

/**
 *  heartbeat option description:
 */
/** Descriptive text for the heartbeat option */
#define HEARTBEAT_DESC      (gnutls_serv_opt_strs+1536)
/** Upper-cased name for the heartbeat option */
#define HEARTBEAT_NAME      (gnutls_serv_opt_strs+1563)
/** Name string for the heartbeat option */
#define HEARTBEAT_name      (gnutls_serv_opt_strs+1573)
/** Compiled in flag settings for the heartbeat option */
#define HEARTBEAT_FLAGS     (OPTST_DISABLED)

/**
 *  x509fmtder option description:
 */
/** Descriptive text for the x509fmtder option */
#define X509FMTDER_DESC      (gnutls_serv_opt_strs+1583)
/** Upper-cased name for the x509fmtder option */
#define X509FMTDER_NAME      (gnutls_serv_opt_strs+1628)
/** Name string for the x509fmtder option */
#define X509FMTDER_name      (gnutls_serv_opt_strs+1639)
/** Compiled in flag settings for the x509fmtder option */
#define X509FMTDER_FLAGS     (OPTST_DISABLED)

/**
 *  priority option description:
 */
/** Descriptive text for the priority option */
#define PRIORITY_DESC      (gnutls_serv_opt_strs+1650)
/** Upper-cased name for the priority option */
#define PRIORITY_NAME      (gnutls_serv_opt_strs+1668)
/** Name string for the priority option */
#define PRIORITY_name      (gnutls_serv_opt_strs+1677)
/** Compiled in flag settings for the priority option */
#define PRIORITY_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  dhparams option description:
 */
/** Descriptive text for the dhparams option */
#define DHPARAMS_DESC      (gnutls_serv_opt_strs+1686)
/** Upper-cased name for the dhparams option */
#define DHPARAMS_NAME      (gnutls_serv_opt_strs+1708)
/** Name string for the dhparams option */
#define DHPARAMS_name      (gnutls_serv_opt_strs+1717)
/** Compiled in flag settings for the dhparams option */
#define DHPARAMS_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_FILE))

/**
 *  x509cafile option description:
 */
/** Descriptive text for the x509cafile option */
#define X509CAFILE_DESC      (gnutls_serv_opt_strs+1726)
/** Upper-cased name for the x509cafile option */
#define X509CAFILE_NAME      (gnutls_serv_opt_strs+1766)
/** Name string for the x509cafile option */
#define X509CAFILE_name      (gnutls_serv_opt_strs+1777)
/** Compiled in flag settings for the x509cafile option */
#define X509CAFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  x509crlfile option description:
 */
/** Descriptive text for the x509crlfile option */
#define X509CRLFILE_DESC      (gnutls_serv_opt_strs+1788)
/** Upper-cased name for the x509crlfile option */
#define X509CRLFILE_NAME      (gnutls_serv_opt_strs+1804)
/** Name string for the x509crlfile option */
#define X509CRLFILE_name      (gnutls_serv_opt_strs+1816)
/** Compiled in flag settings for the x509crlfile option */
#define X509CRLFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_FILE))

/**
 *  pgpkeyfile option description:
 */
/** Descriptive text for the pgpkeyfile option */
#define PGPKEYFILE_DESC      (gnutls_serv_opt_strs+1828)
/** Upper-cased name for the pgpkeyfile option */
#define PGPKEYFILE_NAME      (gnutls_serv_opt_strs+1848)
/** Name string for the pgpkeyfile option */
#define PGPKEYFILE_name      (gnutls_serv_opt_strs+1859)
/** Compiled in flag settings for the pgpkeyfile option */
#define PGPKEYFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_FILE))

/**
 *  pgpkeyring option description:
 */
/** Descriptive text for the pgpkeyring option */
#define PGPKEYRING_DESC      (gnutls_serv_opt_strs+1870)
/** Upper-cased name for the pgpkeyring option */
#define PGPKEYRING_NAME      (gnutls_serv_opt_strs+1895)
/** Name string for the pgpkeyring option */
#define PGPKEYRING_name      (gnutls_serv_opt_strs+1906)
/** Compiled in flag settings for the pgpkeyring option */
#define PGPKEYRING_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_FILE))

/**
 *  pgpcertfile option description:
 */
/** Descriptive text for the pgpcertfile option */
#define PGPCERTFILE_DESC      (gnutls_serv_opt_strs+1917)
/** Upper-cased name for the pgpcertfile option */
#define PGPCERTFILE_NAME      (gnutls_serv_opt_strs+1958)
/** Name string for the pgpcertfile option */
#define PGPCERTFILE_name      (gnutls_serv_opt_strs+1970)
/** Compiled in flag settings for the pgpcertfile option */
#define PGPCERTFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_FILE))

/**
 *  x509keyfile option description:
 */
/** Descriptive text for the x509keyfile option */
#define X509KEYFILE_DESC      (gnutls_serv_opt_strs+1982)
/** Upper-cased name for the x509keyfile option */
#define X509KEYFILE_NAME      (gnutls_serv_opt_strs+2020)
/** Name string for the x509keyfile option */
#define X509KEYFILE_name      (gnutls_serv_opt_strs+2032)
/** Compiled in flag settings for the x509keyfile option */
#define X509KEYFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  x509certfile option description:
 */
/** Descriptive text for the x509certfile option */
#define X509CERTFILE_DESC      (gnutls_serv_opt_strs+2044)
/** Upper-cased name for the x509certfile option */
#define X509CERTFILE_NAME      (gnutls_serv_opt_strs+2090)
/** Name string for the x509certfile option */
#define X509CERTFILE_name      (gnutls_serv_opt_strs+2103)
/** Compiled in flag settings for the x509certfile option */
#define X509CERTFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  x509dsakeyfile option description:
 */
/** Descriptive text for the x509dsakeyfile option */
#define X509DSAKEYFILE_DESC      (gnutls_serv_opt_strs+2116)
/** Upper-cased name for the x509dsakeyfile option */
#define X509DSAKEYFILE_NAME      (gnutls_serv_opt_strs+2166)
/** Name string for the x509dsakeyfile option */
#define X509DSAKEYFILE_name      (gnutls_serv_opt_strs+2181)
/** Compiled in flag settings for the x509dsakeyfile option */
#define X509DSAKEYFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  x509dsacertfile option description:
 */
/** Descriptive text for the x509dsacertfile option */
#define X509DSACERTFILE_DESC      (gnutls_serv_opt_strs+2196)
/** Upper-cased name for the x509dsacertfile option */
#define X509DSACERTFILE_NAME      (gnutls_serv_opt_strs+2254)
/** Name string for the x509dsacertfile option */
#define X509DSACERTFILE_name      (gnutls_serv_opt_strs+2270)
/** Compiled in flag settings for the x509dsacertfile option */
#define X509DSACERTFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  x509ecckeyfile option description:
 */
/** Descriptive text for the x509ecckeyfile option */
#define X509ECCKEYFILE_DESC      (gnutls_serv_opt_strs+2116)
/** Upper-cased name for the x509ecckeyfile option */
#define X509ECCKEYFILE_NAME      (gnutls_serv_opt_strs+2286)
/** Name string for the x509ecckeyfile option */
#define X509ECCKEYFILE_name      (gnutls_serv_opt_strs+2301)
/** Compiled in flag settings for the x509ecckeyfile option */
#define X509ECCKEYFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  x509ecccertfile option description:
 */
/** Descriptive text for the x509ecccertfile option */
#define X509ECCCERTFILE_DESC      (gnutls_serv_opt_strs+2196)
/** Upper-cased name for the x509ecccertfile option */
#define X509ECCCERTFILE_NAME      (gnutls_serv_opt_strs+2316)
/** Name string for the x509ecccertfile option */
#define X509ECCCERTFILE_name      (gnutls_serv_opt_strs+2332)
/** Compiled in flag settings for the x509ecccertfile option */
#define X509ECCCERTFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  pgpsubkey option description:
 */
/** Descriptive text for the pgpsubkey option */
#define PGPSUBKEY_DESC      (gnutls_serv_opt_strs+2348)
/** Upper-cased name for the pgpsubkey option */
#define PGPSUBKEY_NAME      (gnutls_serv_opt_strs+2380)
/** Name string for the pgpsubkey option */
#define PGPSUBKEY_name      (gnutls_serv_opt_strs+2390)
/** Compiled in flag settings for the pgpsubkey option */
#define PGPSUBKEY_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  srppasswd option description:
 */
/** Descriptive text for the srppasswd option */
#define SRPPASSWD_DESC      (gnutls_serv_opt_strs+2400)
/** Upper-cased name for the srppasswd option */
#define SRPPASSWD_NAME      (gnutls_serv_opt_strs+2425)
/** Name string for the srppasswd option */
#define SRPPASSWD_name      (gnutls_serv_opt_strs+2435)
/** Compiled in flag settings for the srppasswd option */
#define SRPPASSWD_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_FILE))

/**
 *  srppasswdconf option description:
 */
/** Descriptive text for the srppasswdconf option */
#define SRPPASSWDCONF_DESC      (gnutls_serv_opt_strs+2445)
/** Upper-cased name for the srppasswdconf option */
#define SRPPASSWDCONF_NAME      (gnutls_serv_opt_strs+2484)
/** Name string for the srppasswdconf option */
#define SRPPASSWDCONF_name      (gnutls_serv_opt_strs+2498)
/** Compiled in flag settings for the srppasswdconf option */
#define SRPPASSWDCONF_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_FILE))

/**
 *  pskpasswd option description:
 */
/** Descriptive text for the pskpasswd option */
#define PSKPASSWD_DESC      (gnutls_serv_opt_strs+2512)
/** Upper-cased name for the pskpasswd option */
#define PSKPASSWD_NAME      (gnutls_serv_opt_strs+2537)
/** Name string for the pskpasswd option */
#define PSKPASSWD_name      (gnutls_serv_opt_strs+2547)
/** Compiled in flag settings for the pskpasswd option */
#define PSKPASSWD_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_FILE))

/**
 *  pskhint option description:
 */
/** Descriptive text for the pskhint option */
#define PSKHINT_DESC      (gnutls_serv_opt_strs+2557)
/** Upper-cased name for the pskhint option */
#define PSKHINT_NAME      (gnutls_serv_opt_strs+2582)
/** Name string for the pskhint option */
#define PSKHINT_name      (gnutls_serv_opt_strs+2590)
/** Compiled in flag settings for the pskhint option */
#define PSKHINT_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  ocsp-response option description:
 */
/** Descriptive text for the ocsp-response option */
#define OCSP_RESPONSE_DESC      (gnutls_serv_opt_strs+2598)
/** Upper-cased name for the ocsp-response option */
#define OCSP_RESPONSE_NAME      (gnutls_serv_opt_strs+2634)
/** Name string for the ocsp-response option */
#define OCSP_RESPONSE_name      (gnutls_serv_opt_strs+2648)
/** Compiled in flag settings for the ocsp-response option */
#define OCSP_RESPONSE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_FILE))

/**
 *  port option description:
 */
/** Descriptive text for the port option */
#define PORT_DESC      (gnutls_serv_opt_strs+2662)
/** Upper-cased name for the port option */
#define PORT_NAME      (gnutls_serv_opt_strs+2685)
/** Name string for the port option */
#define PORT_name      (gnutls_serv_opt_strs+2690)
/** Compiled in flag settings for the port option */
#define PORT_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_NUMERIC))

/**
 *  list option description:
 */
/** Descriptive text for the list option */
#define LIST_DESC      (gnutls_serv_opt_strs+2695)
/** Upper-cased name for the list option */
#define LIST_NAME      (gnutls_serv_opt_strs+2746)
/** Name string for the list option */
#define LIST_name      (gnutls_serv_opt_strs+2751)
/** Compiled in flag settings for the list option */
#define LIST_FLAGS     (OPTST_DISABLED)

/**
 *  provider option description:
 */
/** Descriptive text for the provider option */
#define PROVIDER_DESC      (gnutls_serv_opt_strs+2756)
/** Upper-cased name for the provider option */
#define PROVIDER_NAME      (gnutls_serv_opt_strs+2794)
/** Name string for the provider option */
#define PROVIDER_name      (gnutls_serv_opt_strs+2803)
/** Compiled in flag settings for the provider option */
#define PROVIDER_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_FILE))

/*
 *  Help/More_Help/Version option descriptions:
 */
#define HELP_DESC       (gnutls_serv_opt_strs+2812)
#define HELP_name       (gnutls_serv_opt_strs+2856)
#ifdef HAVE_WORKING_FORK
#define MORE_HELP_DESC  (gnutls_serv_opt_strs+2861)
#define MORE_HELP_name  (gnutls_serv_opt_strs+2906)
#define MORE_HELP_FLAGS (OPTST_IMM | OPTST_NO_INIT)
#else
#define MORE_HELP_DESC  HELP_DESC
#define MORE_HELP_name  HELP_name
#define MORE_HELP_FLAGS (OPTST_OMITTED | OPTST_NO_INIT)
#endif
#ifdef NO_OPTIONAL_OPT_ARGS
#  define VER_FLAGS     (OPTST_IMM | OPTST_NO_INIT)
#else
#  define VER_FLAGS     (OPTST_SET_ARGTYPE(OPARG_TYPE_STRING) | \
                         OPTST_ARG_OPTIONAL | OPTST_IMM | OPTST_NO_INIT)
#endif
#define VER_DESC        (gnutls_serv_opt_strs+2916)
#define VER_name        (gnutls_serv_opt_strs+2952)
/**
 *  Declare option callback procedures
 */
extern tOptProc
    optionBooleanVal,   optionNestedVal,    optionNumericVal,
    optionPagedUsage,   optionPrintVersion, optionResetOpt,
    optionStackArg,     optionTimeDate,     optionTimeVal,
    optionUnstackArg,   optionVendorOption;
static tOptProc
    doOptDebug,         doOptDhparams,      doOptMtu,
    doOptOcsp_Response, doOptPgpcertfile,   doOptPgpkeyfile,
    doOptPgpkeyring,    doOptProvider,      doOptPskpasswd,
    doOptSrppasswd,     doOptSrppasswdconf, doOptX509crlfile,
    doUsageOpt;
#define VER_PROC        optionPrintVersion

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 *  Define the gnutls-serv Option Descriptions.
 * This is an array of OPTION_CT entries, one for each
 * option that the gnutls-serv program responds to.
 */
static tOptDesc optDesc[OPTION_CT] = {
  {  /* entry idx, value */ 0, VALUE_OPT_DEBUG,
     /* equiv idx, value */ 0, VALUE_OPT_DEBUG,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ DEBUG_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --debug */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptDebug,
     /* desc, NAME, name */ DEBUG_DESC, DEBUG_NAME, DEBUG_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 1, VALUE_OPT_NOTICKET,
     /* equiv idx, value */ 1, VALUE_OPT_NOTICKET,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ NOTICKET_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --noticket */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ NOTICKET_DESC, NOTICKET_NAME, NOTICKET_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 2, VALUE_OPT_GENERATE,
     /* equiv idx, value */ 2, VALUE_OPT_GENERATE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ GENERATE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --generate */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ GENERATE_DESC, GENERATE_NAME, GENERATE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 3, VALUE_OPT_QUIET,
     /* equiv idx, value */ 3, VALUE_OPT_QUIET,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ QUIET_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --quiet */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ QUIET_DESC, QUIET_NAME, QUIET_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 4, VALUE_OPT_NODB,
     /* equiv idx, value */ 4, VALUE_OPT_NODB,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ NODB_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --nodb */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ NODB_DESC, NODB_NAME, NODB_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 5, VALUE_OPT_HTTP,
     /* equiv idx, value */ 5, VALUE_OPT_HTTP,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ HTTP_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --http */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ HTTP_DESC, HTTP_NAME, HTTP_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 6, VALUE_OPT_ECHO,
     /* equiv idx, value */ 6, VALUE_OPT_ECHO,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ ECHO_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --echo */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ ECHO_DESC, ECHO_NAME, ECHO_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 7, VALUE_OPT_UDP,
     /* equiv idx, value */ 7, VALUE_OPT_UDP,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ UDP_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --udp */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ UDP_DESC, UDP_NAME, UDP_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 8, VALUE_OPT_MTU,
     /* equiv idx, value */ 8, VALUE_OPT_MTU,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ MTU_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --mtu */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptMtu,
     /* desc, NAME, name */ MTU_DESC, MTU_NAME, MTU_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 9, VALUE_OPT_SRTP_PROFILES,
     /* equiv idx, value */ 9, VALUE_OPT_SRTP_PROFILES,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ SRTP_PROFILES_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --srtp_profiles */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ SRTP_PROFILES_DESC, SRTP_PROFILES_NAME, SRTP_PROFILES_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 10, VALUE_OPT_DISABLE_CLIENT_CERT,
     /* equiv idx, value */ 10, VALUE_OPT_DISABLE_CLIENT_CERT,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ DISABLE_CLIENT_CERT_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --disable-client-cert */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ DISABLE_CLIENT_CERT_DESC, DISABLE_CLIENT_CERT_NAME, DISABLE_CLIENT_CERT_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 11, VALUE_OPT_REQUIRE_CLIENT_CERT,
     /* equiv idx, value */ 11, VALUE_OPT_REQUIRE_CLIENT_CERT,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ REQUIRE_CLIENT_CERT_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --require-client-cert */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ REQUIRE_CLIENT_CERT_DESC, REQUIRE_CLIENT_CERT_NAME, REQUIRE_CLIENT_CERT_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 12, VALUE_OPT_VERIFY_CLIENT_CERT,
     /* equiv idx, value */ 12, VALUE_OPT_VERIFY_CLIENT_CERT,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ VERIFY_CLIENT_CERT_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --verify-client-cert */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ VERIFY_CLIENT_CERT_DESC, VERIFY_CLIENT_CERT_NAME, VERIFY_CLIENT_CERT_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 13, VALUE_OPT_HEARTBEAT,
     /* equiv idx, value */ 13, VALUE_OPT_HEARTBEAT,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ HEARTBEAT_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --heartbeat */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ HEARTBEAT_DESC, HEARTBEAT_NAME, HEARTBEAT_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 14, VALUE_OPT_X509FMTDER,
     /* equiv idx, value */ 14, VALUE_OPT_X509FMTDER,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ X509FMTDER_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --x509fmtder */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ X509FMTDER_DESC, X509FMTDER_NAME, X509FMTDER_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 15, VALUE_OPT_PRIORITY,
     /* equiv idx, value */ 15, VALUE_OPT_PRIORITY,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PRIORITY_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --priority */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ PRIORITY_DESC, PRIORITY_NAME, PRIORITY_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 16, VALUE_OPT_DHPARAMS,
     /* equiv idx, value */ 16, VALUE_OPT_DHPARAMS,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ DHPARAMS_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --dhparams */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptDhparams,
     /* desc, NAME, name */ DHPARAMS_DESC, DHPARAMS_NAME, DHPARAMS_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 17, VALUE_OPT_X509CAFILE,
     /* equiv idx, value */ 17, VALUE_OPT_X509CAFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ X509CAFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --x509cafile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ X509CAFILE_DESC, X509CAFILE_NAME, X509CAFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 18, VALUE_OPT_X509CRLFILE,
     /* equiv idx, value */ 18, VALUE_OPT_X509CRLFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ X509CRLFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --x509crlfile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptX509crlfile,
     /* desc, NAME, name */ X509CRLFILE_DESC, X509CRLFILE_NAME, X509CRLFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 19, VALUE_OPT_PGPKEYFILE,
     /* equiv idx, value */ 19, VALUE_OPT_PGPKEYFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PGPKEYFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --pgpkeyfile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptPgpkeyfile,
     /* desc, NAME, name */ PGPKEYFILE_DESC, PGPKEYFILE_NAME, PGPKEYFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 20, VALUE_OPT_PGPKEYRING,
     /* equiv idx, value */ 20, VALUE_OPT_PGPKEYRING,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PGPKEYRING_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --pgpkeyring */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptPgpkeyring,
     /* desc, NAME, name */ PGPKEYRING_DESC, PGPKEYRING_NAME, PGPKEYRING_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 21, VALUE_OPT_PGPCERTFILE,
     /* equiv idx, value */ 21, VALUE_OPT_PGPCERTFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PGPCERTFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --pgpcertfile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptPgpcertfile,
     /* desc, NAME, name */ PGPCERTFILE_DESC, PGPCERTFILE_NAME, PGPCERTFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 22, VALUE_OPT_X509KEYFILE,
     /* equiv idx, value */ 22, VALUE_OPT_X509KEYFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ X509KEYFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --x509keyfile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ X509KEYFILE_DESC, X509KEYFILE_NAME, X509KEYFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 23, VALUE_OPT_X509CERTFILE,
     /* equiv idx, value */ 23, VALUE_OPT_X509CERTFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ X509CERTFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --x509certfile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ X509CERTFILE_DESC, X509CERTFILE_NAME, X509CERTFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 24, VALUE_OPT_X509DSAKEYFILE,
     /* equiv idx, value */ 24, VALUE_OPT_X509DSAKEYFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ X509DSAKEYFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --x509dsakeyfile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ X509DSAKEYFILE_DESC, X509DSAKEYFILE_NAME, X509DSAKEYFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 25, VALUE_OPT_X509DSACERTFILE,
     /* equiv idx, value */ 25, VALUE_OPT_X509DSACERTFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ X509DSACERTFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --x509dsacertfile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ X509DSACERTFILE_DESC, X509DSACERTFILE_NAME, X509DSACERTFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 26, VALUE_OPT_X509ECCKEYFILE,
     /* equiv idx, value */ 26, VALUE_OPT_X509ECCKEYFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ X509ECCKEYFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --x509ecckeyfile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ X509ECCKEYFILE_DESC, X509ECCKEYFILE_NAME, X509ECCKEYFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 27, VALUE_OPT_X509ECCCERTFILE,
     /* equiv idx, value */ 27, VALUE_OPT_X509ECCCERTFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ X509ECCCERTFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --x509ecccertfile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ X509ECCCERTFILE_DESC, X509ECCCERTFILE_NAME, X509ECCCERTFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 28, VALUE_OPT_PGPSUBKEY,
     /* equiv idx, value */ 28, VALUE_OPT_PGPSUBKEY,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PGPSUBKEY_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --pgpsubkey */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ PGPSUBKEY_DESC, PGPSUBKEY_NAME, PGPSUBKEY_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 29, VALUE_OPT_SRPPASSWD,
     /* equiv idx, value */ 29, VALUE_OPT_SRPPASSWD,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ SRPPASSWD_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --srppasswd */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptSrppasswd,
     /* desc, NAME, name */ SRPPASSWD_DESC, SRPPASSWD_NAME, SRPPASSWD_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 30, VALUE_OPT_SRPPASSWDCONF,
     /* equiv idx, value */ 30, VALUE_OPT_SRPPASSWDCONF,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ SRPPASSWDCONF_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --srppasswdconf */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptSrppasswdconf,
     /* desc, NAME, name */ SRPPASSWDCONF_DESC, SRPPASSWDCONF_NAME, SRPPASSWDCONF_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 31, VALUE_OPT_PSKPASSWD,
     /* equiv idx, value */ 31, VALUE_OPT_PSKPASSWD,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PSKPASSWD_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --pskpasswd */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptPskpasswd,
     /* desc, NAME, name */ PSKPASSWD_DESC, PSKPASSWD_NAME, PSKPASSWD_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 32, VALUE_OPT_PSKHINT,
     /* equiv idx, value */ 32, VALUE_OPT_PSKHINT,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PSKHINT_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --pskhint */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ PSKHINT_DESC, PSKHINT_NAME, PSKHINT_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 33, VALUE_OPT_OCSP_RESPONSE,
     /* equiv idx, value */ 33, VALUE_OPT_OCSP_RESPONSE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ OCSP_RESPONSE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --ocsp-response */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptOcsp_Response,
     /* desc, NAME, name */ OCSP_RESPONSE_DESC, OCSP_RESPONSE_NAME, OCSP_RESPONSE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 34, VALUE_OPT_PORT,
     /* equiv idx, value */ 34, VALUE_OPT_PORT,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PORT_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --port */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ optionNumericVal,
     /* desc, NAME, name */ PORT_DESC, PORT_NAME, PORT_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 35, VALUE_OPT_LIST,
     /* equiv idx, value */ 35, VALUE_OPT_LIST,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ LIST_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --list */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ LIST_DESC, LIST_NAME, LIST_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 36, VALUE_OPT_PROVIDER,
     /* equiv idx, value */ 36, VALUE_OPT_PROVIDER,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PROVIDER_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --provider */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptProvider,
     /* desc, NAME, name */ PROVIDER_DESC, PROVIDER_NAME, PROVIDER_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ INDEX_OPT_VERSION, VALUE_OPT_VERSION,
     /* equiv idx value  */ NO_EQUIVALENT, VALUE_OPT_VERSION,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ VER_FLAGS, AOUSE_VERSION,
     /* last opt argumnt */ { NULL },
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ VER_PROC,
     /* desc, NAME, name */ VER_DESC, NULL, VER_name,
     /* disablement strs */ NULL, NULL },



  {  /* entry idx, value */ INDEX_OPT_HELP, VALUE_OPT_HELP,
     /* equiv idx value  */ NO_EQUIVALENT, VALUE_OPT_HELP,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ OPTST_IMM | OPTST_NO_INIT, AOUSE_HELP,
     /* last opt argumnt */ { NULL },
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doUsageOpt,
     /* desc, NAME, name */ HELP_DESC, NULL, HELP_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ INDEX_OPT_MORE_HELP, VALUE_OPT_MORE_HELP,
     /* equiv idx value  */ NO_EQUIVALENT, VALUE_OPT_MORE_HELP,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ MORE_HELP_FLAGS, AOUSE_MORE_HELP,
     /* last opt argumnt */ { NULL },
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL,  NULL,
     /* option proc      */ optionPagedUsage,
     /* desc, NAME, name */ MORE_HELP_DESC, NULL, MORE_HELP_name,
     /* disablement strs */ NULL, NULL }
};


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/** Reference to the upper cased version of gnutls-serv. */
#define zPROGNAME       (gnutls_serv_opt_strs+2960)
/** Reference to the title line for gnutls-serv usage. */
#define zUsageTitle     (gnutls_serv_opt_strs+2972)
/** There is no gnutls-serv configuration file. */
#define zRcName         NULL
/** There are no directories to search for gnutls-serv config files. */
#define apzHomeList     NULL
/** The gnutls-serv program bug email address. */
#define zBugsAddr       (gnutls_serv_opt_strs+3058)
/** Clarification/explanation of what gnutls-serv does. */
#define zExplain        (gnutls_serv_opt_strs+3074)
/** Extra detail explaining what gnutls-serv does. */
#define zDetail         (gnutls_serv_opt_strs+3076)
/** The full version string for gnutls-serv. */
#define zFullVersion    (gnutls_serv_opt_strs+3134)
/* extracted from optcode.tlib near line 364 */

#if defined(ENABLE_NLS)
# define OPTPROC_BASE OPTPROC_TRANSLATE | OPTPROC_NXLAT_OPT
  static tOptionXlateProc translate_option_strings;
#else
# define OPTPROC_BASE OPTPROC_NONE
# define translate_option_strings NULL
#endif /* ENABLE_NLS */

#define gnutls_serv_full_usage (NULL)
#define gnutls_serv_short_usage (gnutls_serv_opt_strs+3152)

#endif /* not defined __doxygen__ */

/*
 *  Create the static procedure(s) declared above.
 */
/**
 * The callout function that invokes the optionUsage function.
 *
 * @param[in] opts the AutoOpts option description structure
 * @param[in] od   the descriptor for the "help" (usage) option.
 * @noreturn
 */
static void
doUsageOpt(tOptions * opts, tOptDesc * od)
{
    int ex_code;
    ex_code = GNUTLS_SERV_EXIT_SUCCESS;
    optionUsage(&gnutls_servOptions, ex_code);
    /* NOTREACHED */
    exit(GNUTLS_SERV_EXIT_FAILURE);
    (void)opts;
    (void)od;
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the debug option.
 * Specifies the debug level.
 * @param[in] pOptions the gnutls-serv options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptDebug(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static struct {long rmin, rmax;} const rng[1] = {
        { 0 ,  9999 } };
    int  ix;

    if (pOptions <= OPTPROC_EMIT_LIMIT)
        goto emit_ranges;
    optionNumericVal(pOptions, pOptDesc);

    for (ix = 0; ix < 1; ix++) {
        if (pOptDesc->optArg.argInt < rng[ix].rmin)
            continue;  /* ranges need not be ordered. */
        if (pOptDesc->optArg.argInt == rng[ix].rmin)
            return;
        if (rng[ix].rmax == LONG_MIN)
            continue;
        if (pOptDesc->optArg.argInt <= rng[ix].rmax)
            return;
    }

    option_usage_fp = stderr;

 emit_ranges:
optionShowRange(pOptions, pOptDesc, VOIDP(rng), 1);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the mtu option.
 *
 * @param[in] pOptions the gnutls-serv options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptMtu(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static struct {long rmin, rmax;} const rng[1] = {
        { 0, 17000 } };
    int  ix;

    if (pOptions <= OPTPROC_EMIT_LIMIT)
        goto emit_ranges;
    optionNumericVal(pOptions, pOptDesc);

    for (ix = 0; ix < 1; ix++) {
        if (pOptDesc->optArg.argInt < rng[ix].rmin)
            continue;  /* ranges need not be ordered. */
        if (pOptDesc->optArg.argInt == rng[ix].rmin)
            return;
        if (rng[ix].rmax == LONG_MIN)
            continue;
        if (pOptDesc->optArg.argInt <= rng[ix].rmax)
            return;
    }

    option_usage_fp = stderr;

 emit_ranges:
optionShowRange(pOptions, pOptDesc, VOIDP(rng), 1);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the dhparams option.
 *
 * @param[in] pOptions the gnutls-serv options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptDhparams(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static teOptFileType const  type =
        FTYPE_MODE_MUST_EXIST + FTYPE_MODE_NO_OPEN;
    static tuFileMode           mode;
#ifndef O_CLOEXEC
#  define O_CLOEXEC 0
#endif
    mode.file_flags = O_CLOEXEC;

    /*
     * This function handles special invalid values for "pOptions"
     */
    optionFileCheck(pOptions, pOptDesc, type, mode);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the x509crlfile option.
 *
 * @param[in] pOptions the gnutls-serv options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptX509crlfile(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static teOptFileType const  type =
        FTYPE_MODE_MUST_EXIST + FTYPE_MODE_NO_OPEN;
    static tuFileMode           mode;
#ifndef O_CLOEXEC
#  define O_CLOEXEC 0
#endif
    mode.file_flags = O_CLOEXEC;

    /*
     * This function handles special invalid values for "pOptions"
     */
    optionFileCheck(pOptions, pOptDesc, type, mode);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the pgpkeyfile option.
 *
 * @param[in] pOptions the gnutls-serv options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptPgpkeyfile(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static teOptFileType const  type =
        FTYPE_MODE_MUST_EXIST + FTYPE_MODE_NO_OPEN;
    static tuFileMode           mode;
#ifndef O_CLOEXEC
#  define O_CLOEXEC 0
#endif
    mode.file_flags = O_CLOEXEC;

    /*
     * This function handles special invalid values for "pOptions"
     */
    optionFileCheck(pOptions, pOptDesc, type, mode);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the pgpkeyring option.
 *
 * @param[in] pOptions the gnutls-serv options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptPgpkeyring(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static teOptFileType const  type =
        FTYPE_MODE_MUST_EXIST + FTYPE_MODE_NO_OPEN;
    static tuFileMode           mode;
#ifndef O_CLOEXEC
#  define O_CLOEXEC 0
#endif
    mode.file_flags = O_CLOEXEC;

    /*
     * This function handles special invalid values for "pOptions"
     */
    optionFileCheck(pOptions, pOptDesc, type, mode);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the pgpcertfile option.
 *
 * @param[in] pOptions the gnutls-serv options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptPgpcertfile(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static teOptFileType const  type =
        FTYPE_MODE_MUST_EXIST + FTYPE_MODE_NO_OPEN;
    static tuFileMode           mode;
#ifndef O_CLOEXEC
#  define O_CLOEXEC 0
#endif
    mode.file_flags = O_CLOEXEC;

    /*
     * This function handles special invalid values for "pOptions"
     */
    optionFileCheck(pOptions, pOptDesc, type, mode);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the srppasswd option.
 *
 * @param[in] pOptions the gnutls-serv options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptSrppasswd(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static teOptFileType const  type =
        FTYPE_MODE_MUST_EXIST + FTYPE_MODE_NO_OPEN;
    static tuFileMode           mode;
#ifndef O_CLOEXEC
#  define O_CLOEXEC 0
#endif
    mode.file_flags = O_CLOEXEC;

    /*
     * This function handles special invalid values for "pOptions"
     */
    optionFileCheck(pOptions, pOptDesc, type, mode);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the srppasswdconf option.
 *
 * @param[in] pOptions the gnutls-serv options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptSrppasswdconf(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static teOptFileType const  type =
        FTYPE_MODE_MUST_EXIST + FTYPE_MODE_NO_OPEN;
    static tuFileMode           mode;
#ifndef O_CLOEXEC
#  define O_CLOEXEC 0
#endif
    mode.file_flags = O_CLOEXEC;

    /*
     * This function handles special invalid values for "pOptions"
     */
    optionFileCheck(pOptions, pOptDesc, type, mode);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the pskpasswd option.
 *
 * @param[in] pOptions the gnutls-serv options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptPskpasswd(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static teOptFileType const  type =
        FTYPE_MODE_MUST_EXIST + FTYPE_MODE_NO_OPEN;
    static tuFileMode           mode;
#ifndef O_CLOEXEC
#  define O_CLOEXEC 0
#endif
    mode.file_flags = O_CLOEXEC;

    /*
     * This function handles special invalid values for "pOptions"
     */
    optionFileCheck(pOptions, pOptDesc, type, mode);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the ocsp-response option.
 * If the client requested an OCSP response, return data from this file to the client.
 * @param[in] pOptions the gnutls-serv options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptOcsp_Response(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static teOptFileType const  type =
        FTYPE_MODE_MUST_EXIST + FTYPE_MODE_NO_OPEN;
    static tuFileMode           mode;
#ifndef O_CLOEXEC
#  define O_CLOEXEC 0
#endif
    mode.file_flags = O_CLOEXEC;

    /*
     * This function handles special invalid values for "pOptions"
     */
    optionFileCheck(pOptions, pOptDesc, type, mode);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the provider option.
 * This will override the default options in /etc/gnutls/pkcs11.conf
 * @param[in] pOptions the gnutls-serv options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptProvider(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static teOptFileType const  type =
        FTYPE_MODE_MUST_EXIST + FTYPE_MODE_NO_OPEN;
    static tuFileMode           mode;
#ifndef O_CLOEXEC
#  define O_CLOEXEC 0
#endif
    mode.file_flags = O_CLOEXEC;

    /*
     * This function handles special invalid values for "pOptions"
     */
    optionFileCheck(pOptions, pOptDesc, type, mode);
}
/* extracted from optmain.tlib near line 1250 */

/**
 * The directory containing the data associated with gnutls-serv.
 */
#ifndef  PKGDATADIR
# define PKGDATADIR ""
#endif

/**
 * Information about the person or institution that packaged gnutls-serv
 * for the current distribution.
 */
#ifndef  WITH_PACKAGER
# define gnutls_serv_packager_info NULL
#else
/** Packager information for gnutls-serv. */
static char const gnutls_serv_packager_info[] =
    "Packaged by " WITH_PACKAGER

# ifdef WITH_PACKAGER_VERSION
        " ("WITH_PACKAGER_VERSION")"
# endif

# ifdef WITH_PACKAGER_BUG_REPORTS
    "\nReport gnutls_serv bugs to " WITH_PACKAGER_BUG_REPORTS
# endif
    "\n";
#endif
#ifndef __doxygen__

#endif /* __doxygen__ */
/**
 * The option definitions for gnutls-serv.  The one structure that
 * binds them all.
 */
tOptions gnutls_servOptions = {
    OPTIONS_STRUCT_VERSION,
    0, NULL,                    /* original argc + argv    */
    ( OPTPROC_BASE
    + OPTPROC_ERRSTOP
    + OPTPROC_SHORTOPT
    + OPTPROC_LONGOPT
    + OPTPROC_NO_REQ_OPT
    + OPTPROC_NO_ARGS
    + OPTPROC_GNUUSAGE
    + OPTPROC_MISUSE ),
    0, NULL,                    /* current option index, current option */
    NULL,         NULL,         zPROGNAME,
    zRcName,      zCopyright,   zLicenseDescrip,
    zFullVersion, apzHomeList,  zUsageTitle,
    zExplain,     zDetail,      optDesc,
    zBugsAddr,                  /* address to send bugs to */
    NULL, NULL,                 /* extensions/saved state  */
    optionUsage, /* usage procedure */
    translate_option_strings,   /* translation procedure */
    /*
     *  Indexes to special options
     */
    { INDEX_OPT_MORE_HELP, /* more-help option index */
      NO_EQUIVALENT, /* save option index */
      NO_EQUIVALENT, /* '-#' option index */
      NO_EQUIVALENT /* index of default opt */
    },
    40 /* full option count */, 37 /* user option count */,
    gnutls_serv_full_usage, gnutls_serv_short_usage,
    NULL, NULL,
    PKGDATADIR, gnutls_serv_packager_info
};

#if ENABLE_NLS
/**
 * This code is designed to translate translatable option text for the
 * gnutls-serv program.  These translations happen upon entry
 * to optionProcess().
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#ifdef HAVE_DCGETTEXT
# include <gettext.h>
#endif
#include <autoopts/usage-txt.h>

static char * AO_gettext(char const * pz);
static void   coerce_it(void ** s);

/**
 * AutoGen specific wrapper function for gettext.  It relies on the macro _()
 * to convert from English to the target language, then strdup-duplicates the
 * result string.  It tries the "libopts" domain first, then whatever has been
 * set via the \a textdomain(3) call.
 *
 * @param[in] pz the input text used as a lookup key.
 * @returns the translated text (if there is one),
 *   or the original text (if not).
 */
static char *
AO_gettext(char const * pz)
{
    char * res;
    if (pz == NULL)
        return NULL;
#ifdef HAVE_DCGETTEXT
    /*
     * While processing the option_xlateable_txt data, try to use the
     * "libopts" domain.  Once we switch to the option descriptor data,
     * do *not* use that domain.
     */
    if (option_xlateable_txt.field_ct != 0) {
        res = dgettext("libopts", pz);
        if (res == pz)
            res = (char *)VOIDP(_(pz));
    } else
        res = (char *)VOIDP(_(pz));
#else
    res = (char *)VOIDP(_(pz));
#endif
    if (res == pz)
        return res;
    res = strdup(res);
    if (res == NULL) {
        fputs(_("No memory for duping translated strings\n"), stderr);
        exit(GNUTLS_SERV_EXIT_FAILURE);
    }
    return res;
}

/**
 * All the pointers we use are marked "* const", but they are stored in
 * writable memory.  Coerce the mutability and set the pointer.
 */
static void coerce_it(void ** s) { *s = AO_gettext(*s);
}

/**
 * Translate all the translatable strings in the gnutls_servOptions
 * structure defined above.  This is done only once.
 */
static void
translate_option_strings(void)
{
    tOptions * const opts = &gnutls_servOptions;

    /*
     *  Guard against re-translation.  It won't work.  The strings will have
     *  been changed by the first pass through this code.  One shot only.
     */
    if (option_xlateable_txt.field_ct != 0) {
        /*
         *  Do the translations.  The first pointer follows the field count
         *  field.  The field count field is the size of a pointer.
         */
        char ** ppz = (char**)VOIDP(&(option_xlateable_txt));
        int     ix  = option_xlateable_txt.field_ct;

        do {
            ppz++; /* skip over field_ct */
            *ppz = AO_gettext(*ppz);
        } while (--ix > 0);
        /* prevent re-translation and disable "libopts" domain lookup */
        option_xlateable_txt.field_ct = 0;

        coerce_it(VOIDP(&(opts->pzCopyright)));
        coerce_it(VOIDP(&(opts->pzCopyNotice)));
        coerce_it(VOIDP(&(opts->pzFullVersion)));
        coerce_it(VOIDP(&(opts->pzUsageTitle)));
        coerce_it(VOIDP(&(opts->pzExplain)));
        coerce_it(VOIDP(&(opts->pzDetail)));
        {
            tOptDesc * od = opts->pOptDesc;
            for (ix = opts->optCt; ix > 0; ix--, od++)
                coerce_it(VOIDP(&(od->pzText)));
        }
    }
}
#endif /* ENABLE_NLS */

#ifdef DO_NOT_COMPILE_THIS_CODE_IT_IS_FOR_GETTEXT
/** I18N function strictly for xgettext.  Do not compile. */
static void bogus_function(void) {
  /* TRANSLATORS:

     The following dummy function was crated solely so that xgettext can
     extract the correct strings.  These strings are actually referenced
     by a field name in the gnutls_servOptions structure noted in the
     comments below.  The literal text is defined in gnutls_serv_opt_strs.
   
     NOTE: the strings below are segmented with respect to the source string
     gnutls_serv_opt_strs.  The strings above are handed off for translation
     at run time a paragraph at a time.  Consequently, they are presented here
     for translation a paragraph at a time.
   
     ALSO: often the description for an option will reference another option
     by name.  These are set off with apostrophe quotes (I hope).  Do not
     translate option names.
   */
  /* referenced via gnutls_servOptions.pzCopyright */
  puts(_("gnutls-serv 3.4.9\n\
Copyright (C) 2000-2016 Free Software Foundation, and others, all rights reserved.\n\
This is free software. It is licensed for use, modification and\n\
redistribution under the terms of the GNU General Public License,\n\
version 3 or later <http://gnu.org/licenses/gpl.html>\n"));

  /* referenced via gnutls_servOptions.pzCopyNotice */
  puts(_("gnutls-serv is free software: you can redistribute it and/or modify it\n\
under the terms of the GNU General Public License as published by the Free\n\
Software Foundation, either version 3 of the License, or (at your option)\n\
any later version.\n\n"));
  puts(_("gnutls-serv is distributed in the hope that it will be useful, but WITHOUT\n\
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n\
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n\
more details.\n\n"));
  puts(_("You should have received a copy of the GNU General Public License along\n\
with this program.  If not, see <http://www.gnu.org/licenses/>.\n"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Enable debugging"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Don't accept session tickets"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Generate Diffie-Hellman and RSA-export parameters"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Suppress some messages"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Do not use a resumption database"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Act as an HTTP server"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Act as an Echo server"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Use DTLS (datagram TLS) over UDP"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Set MTU for datagram TLS"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Offer SRTP profiles"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Do not request a client certificate"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Require a client certificate"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("If a client certificate is sent then verify it."));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Activate heartbeat support"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Use DER format for certificates to read from"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Priorities string"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("DH params file to use"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Certificate file or PKCS #11 URL to use"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("CRL file to use"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("PGP Key file to use"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("PGP Key ring file to use"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("PGP Public Key (certificate) file to use"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("X.509 key file or PKCS #11 URL to use"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("X.509 Certificate file or PKCS #11 URL to use"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Alternative X.509 key file or PKCS #11 URL to use"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Alternative X.509 Certificate file or PKCS #11 URL to use"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Alternative X.509 key file or PKCS #11 URL to use"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Alternative X.509 Certificate file or PKCS #11 URL to use"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("PGP subkey to use (hex or auto)"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("SRP password file to use"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("SRP password configuration file to use"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("PSK password file to use"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("PSK identity hint to use"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("The OCSP response to send to client"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("The port to connect to"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Print a list of the supported algorithms and modes"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("Specify the PKCS #11 provider library"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("display extended usage information and exit"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("extended usage information passed thru pager"));

  /* referenced via gnutls_servOptions.pOptDesc->pzText */
  puts(_("output version information and exit"));

  /* referenced via gnutls_servOptions.pzUsageTitle */
  puts(_("gnutls-serv - GnuTLS server\n\
Usage:  %s [ -<flag> [<val>] | --<name>[{=| }<val>] ]...\n"));

  /* referenced via gnutls_servOptions.pzExplain */
  puts(_("\n"));

  /* referenced via gnutls_servOptions.pzDetail */
  puts(_("Server program that listens to incoming TLS connections.\n"));

  /* referenced via gnutls_servOptions.pzFullVersion */
  puts(_("gnutls-serv 3.4.9"));

  /* referenced via gnutls_servOptions.pzFullUsage */
  puts(_("<<<NOT-FOUND>>>"));

  /* referenced via gnutls_servOptions.pzShortUsage */
  puts(_("Usage: gnutls-serv [options]\n\
gnutls-serv --help for usage instructions.\n"));
  /* LIBOPTS-MESSAGES: */
#line 67 "../autoopts.c"
  puts(_("allocation of %d bytes failed\n"));
#line 93 "../autoopts.c"
  puts(_("allocation of %d bytes failed\n"));
#line 53 "../init.c"
  puts(_("AutoOpts function called without option descriptor\n"));
#line 86 "../init.c"
  puts(_("\tThis exceeds the compiled library version:  "));
#line 84 "../init.c"
  puts(_("Automated Options Processing Error!\n"
       "\t%s called AutoOpts function with structure version %d:%d:%d.\n"));
#line 80 "../autoopts.c"
  puts(_("realloc of %d bytes at 0x%p failed\n"));
#line 88 "../init.c"
  puts(_("\tThis is less than the minimum library version:  "));
#line 121 "../version.c"
  puts(_("Automated Options version %s\n"
       "\tCopyright (C) 1999-2014 by Bruce Korb - all rights reserved\n"));
#line 87 "../makeshell.c"
  puts(_("(AutoOpts bug):  %s.\n"));
#line 90 "../reset.c"
  puts(_("optionResetOpt() called, but reset-option not configured"));
#line 292 "../usage.c"
  puts(_("could not locate the 'help' option"));
#line 336 "../autoopts.c"
  puts(_("optionProcess() was called with invalid data"));
#line 748 "../usage.c"
  puts(_("invalid argument type specified"));
#line 598 "../find.c"
  puts(_("defaulted to option with optional arg"));
#line 76 "../alias.c"
  puts(_("aliasing option is out of range."));
#line 235 "../enum.c"
  puts(_("%s error:  the keyword '%s' is ambiguous for %s\n"));
#line 108 "../find.c"
  puts(_("  The following options match:\n"));
#line 293 "../find.c"
  puts(_("%s: ambiguous option name: %s (matches %d options)\n"));
#line 161 "../check.c"
  puts(_("%s: Command line arguments required\n"));
#line 43 "../alias.c"
  puts(_("%d %s%s options allowed\n"));
#line 94 "../makeshell.c"
  puts(_("%s error %d (%s) calling %s for '%s'\n"));
#line 306 "../makeshell.c"
  puts(_("interprocess pipe"));
#line 168 "../version.c"
  puts(_("error: version option argument '%c' invalid.  Use:\n"
       "\t'v' - version only\n"
       "\t'c' - version and copyright\n"
       "\t'n' - version and full copyright notice\n"));
#line 58 "../check.c"
  puts(_("%s error:  the '%s' and '%s' options conflict\n"));
#line 217 "../find.c"
  puts(_("%s: The '%s' option has been disabled."));
#line 430 "../find.c"
  puts(_("%s: The '%s' option has been disabled."));
#line 38 "../alias.c"
  puts(_("-equivalence"));
#line 469 "../find.c"
  puts(_("%s: illegal option -- %c\n"));
#line 110 "../reset.c"
  puts(_("%s: illegal option -- %c\n"));
#line 271 "../find.c"
  puts(_("%s: illegal option -- %s\n"));
#line 755 "../find.c"
  puts(_("%s: illegal option -- %s\n"));
#line 118 "../reset.c"
  puts(_("%s: illegal option -- %s\n"));
#line 335 "../find.c"
  puts(_("%s: unknown vendor extension option -- %s\n"));
#line 160 "../enum.c"
  puts(_("  or an integer from %d through %d\n"));
#line 170 "../enum.c"
  puts(_("  or an integer from %d through %d\n"));
#line 747 "../usage.c"
  puts(_("%s error:  invalid option descriptor for %s\n"));
#line 1081 "../usage.c"
  puts(_("%s error:  invalid option descriptor for %s\n"));
#line 385 "../find.c"
  puts(_("%s: invalid option name: %s\n"));
#line 527 "../find.c"
  puts(_("%s: The '%s' option requires an argument.\n"));
#line 156 "../autoopts.c"
  puts(_("(AutoOpts bug):  Equivalenced option '%s' was equivalenced to both\n"
       "\t'%s' and '%s'."));
#line 94 "../check.c"
  puts(_("%s error:  The %s option is required\n"));
#line 632 "../find.c"
  puts(_("%s: The '%s' option cannot have an argument.\n"));
#line 151 "../check.c"
  puts(_("%s: Command line arguments are not allowed.\n"));
#line 535 "../save.c"
  puts(_("error %d (%s) creating %s\n"));
#line 235 "../enum.c"
  puts(_("%s error:  '%s' does not match any %s keywords.\n"));
#line 93 "../reset.c"
  puts(_("%s error: The '%s' option requires an argument.\n"));
#line 186 "../save.c"
  puts(_("error %d (%s) stat-ing %s\n"));
#line 238 "../save.c"
  puts(_("error %d (%s) stat-ing %s\n"));
#line 143 "../restore.c"
  puts(_("%s error: no saved option state\n"));
#line 231 "../autoopts.c"
  puts(_("'%s' is not a command line option.\n"));
#line 113 "../time.c"
  puts(_("%s error:  '%s' is not a recognizable date/time.\n"));
#line 131 "../save.c"
  puts(_("'%s' not defined\n"));
#line 50 "../time.c"
  puts(_("%s error:  '%s' is not a recognizable time duration.\n"));
#line 92 "../check.c"
  puts(_("%s error:  The %s option must appear %d times.\n"));
#line 165 "../numeric.c"
  puts(_("%s error:  '%s' is not a recognizable number.\n"));
#line 201 "../enum.c"
  puts(_("%s error:  %s exceeds %s keyword count\n"));
#line 330 "../usage.c"
  puts(_("Try '%s %s' for more information.\n"));
#line 45 "../alias.c"
  puts(_("one %s%s option allowed\n"));
#line 208 "../makeshell.c"
  puts(_("standard output"));
#line 943 "../makeshell.c"
  puts(_("standard output"));
#line 274 "../usage.c"
  puts(_("standard output"));
#line 415 "../usage.c"
  puts(_("standard output"));
#line 625 "../usage.c"
  puts(_("standard output"));
#line 175 "../version.c"
  puts(_("standard output"));
#line 274 "../usage.c"
  puts(_("standard error"));
#line 415 "../usage.c"
  puts(_("standard error"));
#line 625 "../usage.c"
  puts(_("standard error"));
#line 175 "../version.c"
  puts(_("standard error"));
#line 208 "../makeshell.c"
  puts(_("write"));
#line 943 "../makeshell.c"
  puts(_("write"));
#line 273 "../usage.c"
  puts(_("write"));
#line 414 "../usage.c"
  puts(_("write"));
#line 624 "../usage.c"
  puts(_("write"));
#line 174 "../version.c"
  puts(_("write"));
#line 60 "../numeric.c"
  puts(_("%s error:  %s option value %ld is out of range.\n"));
#line 44 "../check.c"
  puts(_("%s error:  %s option requires the %s option\n"));
#line 130 "../save.c"
  puts(_("%s warning:  cannot save options - %s not regular file\n"));
#line 185 "../save.c"
  puts(_("%s warning:  cannot save options - %s not regular file\n"));
#line 237 "../save.c"
  puts(_("%s warning:  cannot save options - %s not regular file\n"));
#line 256 "../save.c"
  puts(_("%s warning:  cannot save options - %s not regular file\n"));
#line 534 "../save.c"
  puts(_("%s warning:  cannot save options - %s not regular file\n"));
  /* END-LIBOPTS-MESSAGES */

  /* USAGE-TEXT: */
#line 873 "../usage.c"
  puts(_("\t\t\t\t- an alternate for '%s'\n"));
#line 1148 "../usage.c"
  puts(_("Version, usage and configuration options:"));
#line 924 "../usage.c"
  puts(_("\t\t\t\t- default option for unnamed options\n"));
#line 837 "../usage.c"
  puts(_("\t\t\t\t- disabled as '--%s'\n"));
#line 1117 "../usage.c"
  puts(_(" --- %-14s %s\n"));
#line 1115 "../usage.c"
  puts(_("This option has been disabled"));
#line 864 "../usage.c"
  puts(_("\t\t\t\t- enabled by default\n"));
#line 40 "../alias.c"
  puts(_("%s error:  only "));
#line 1194 "../usage.c"
  puts(_(" - examining environment variables named %s_*\n"));
#line 168 "../file.c"
  puts(_("\t\t\t\t- file must not pre-exist\n"));
#line 172 "../file.c"
  puts(_("\t\t\t\t- file must pre-exist\n"));
#line 380 "../usage.c"
  puts(_("Options are specified by doubled hyphens and their name or by a single\n"
       "hyphen and the flag character.\n"));
#line 921 "../makeshell.c"
  puts(_("\n"
       "= = = = = = = =\n\n"
       "This incarnation of genshell will produce\n"
       "a shell script to parse the options for %s:\n\n"));
#line 167 "../enum.c"
  puts(_("  or an integer mask with any of the lower %d bits set\n"));
#line 897 "../usage.c"
  puts(_("\t\t\t\t- is a set membership option\n"));
#line 918 "../usage.c"
  puts(_("\t\t\t\t- must appear between %d and %d times\n"));
#line 382 "../usage.c"
  puts(_("Options are specified by single or double hyphens and their name.\n"));
#line 904 "../usage.c"
  puts(_("\t\t\t\t- may appear multiple times\n"));
#line 891 "../usage.c"
  puts(_("\t\t\t\t- may not be preset\n"));
#line 1309 "../usage.c"
  puts(_("   Arg Option-Name    Description\n"));
#line 1245 "../usage.c"
  puts(_("  Flg Arg Option-Name    Description\n"));
#line 1303 "../usage.c"
  puts(_("  Flg Arg Option-Name    Description\n"));
#line 1304 "../usage.c"
  puts(_(" %3s %s"));
#line 1310 "../usage.c"
  puts(_(" %3s %s"));
#line 387 "../usage.c"
  puts(_("The '-#<number>' option may omit the hash char\n"));
#line 383 "../usage.c"
  puts(_("All arguments are named options.\n"));
#line 971 "../usage.c"
  puts(_(" - reading file %s"));
#line 409 "../usage.c"
  puts(_("\n"
       "Please send bug reports to:  <%s>\n"));
#line 100 "../version.c"
  puts(_("\n"
       "Please send bug reports to:  <%s>\n"));
#line 129 "../version.c"
  puts(_("\n"
       "Please send bug reports to:  <%s>\n"));
#line 903 "../usage.c"
  puts(_("\t\t\t\t- may NOT appear - preset only\n"));
#line 944 "../usage.c"
  puts(_("\n"
       "The following option preset mechanisms are supported:\n"));
#line 1192 "../usage.c"
  puts(_("\n"
       "The following option preset mechanisms are supported:\n"));
#line 682 "../usage.c"
  puts(_("prohibits these options:\n"));
#line 677 "../usage.c"
  puts(_("prohibits the option '%s'\n"));
#line 81 "../numeric.c"
  puts(_("%s%ld to %ld"));
#line 79 "../numeric.c"
  puts(_("%sgreater than or equal to %ld"));
#line 75 "../numeric.c"
  puts(_("%s%ld exactly"));
#line 68 "../numeric.c"
  puts(_("%sit must lie in one of the ranges:\n"));
#line 68 "../numeric.c"
  puts(_("%sit must be in the range:\n"));
#line 88 "../numeric.c"
  puts(_(", or\n"));
#line 66 "../numeric.c"
  puts(_("%sis scalable with a suffix: k/K/m/M/g/G/t/T\n"));
#line 77 "../numeric.c"
  puts(_("%sless than or equal to %ld"));
#line 390 "../usage.c"
  puts(_("Operands and options may be intermixed.  They will be reordered.\n"));
#line 652 "../usage.c"
  puts(_("requires the option '%s'\n"));
#line 655 "../usage.c"
  puts(_("requires these options:\n"));
#line 1321 "../usage.c"
  puts(_("   Arg Option-Name   Req?  Description\n"));
#line 1315 "../usage.c"
  puts(_("  Flg Arg Option-Name   Req?  Description\n"));
#line 168 "../enum.c"
  puts(_("or you may use a numeric representation.  Preceding these with a '!'\n"
       "will clear the bits, specifying 'none' will clear all bits, and 'all'\n"
       "will set them all.  Multiple entries may be passed as an option\n"
       "argument list.\n"));
#line 910 "../usage.c"
  puts(_("\t\t\t\t- may appear up to %d times\n"));
#line 77 "../enum.c"
  puts(_("The valid \"%s\" option keywords are:\n"));
#line 1152 "../usage.c"
  puts(_("The next option supports vendor supported extra options:"));
#line 773 "../usage.c"
  puts(_("These additional options are:"));
  /* END-USAGE-TEXT */
}
#endif /* uncompilable code */
#ifdef  __cplusplus
}
#endif
/* serv-args.c ends here */
